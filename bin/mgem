#!/usr/bin/env ruby

require "#{File.dirname(__FILE__)}/../lib/mgem"
extend Mrbgem

main_cmd = ARGV[0]
arg1 = ARGV[1]
arg2 = ARGV[2]

gems = load_gems unless main_cmd == 'help'

info_proc = lambda do |obj| 
  puts "  #{obj.name.ljust(30)}#{obj.description}"
end
r = lambda { |o| /^(#{1.upto(o.size).map{|x|o[0...(x)]}.join('|')})$/ }

detail_info_proc = lambda do |obj|
  puts <<INFO
  Name:         #{obj.name}
  Author:       #{obj.author}
  Description:  #{obj.description}
  Website:      #{obj.website}
  Repository:   #{obj.repository}
  Repo Options: #{obj.repooptions}
  Protocol:     #{obj.protocol}

INFO
end

def list_active_gems(current_gems)
  puts "List of active GEMs:"
  current_gems.active.each do |obj|
    puts "  [X] #{obj.name.ljust(20)}#{obj.description}" 
  end
  puts
end

def get_toolchain
  puts <<__TOOLCHAIN_SELECT__

Please choose your toolchain:
#{Mrbgem::TOOLCHAINS.map{|x| "  '#{x[0]}' for #{Mrbgem::TOOLCHAINS[x[0]][:desc]}\n" }.join}
__TOOLCHAIN_SELECT__

  print 'Toolchain: '
  STDOUT.flush
  toolchain = STDIN.gets.chomp
  if Mrbgem::TOOLCHAINS.has_key? toolchain
    toolchain = Mrbgem::TOOLCHAINS[toolchain][:id]
  else
    puts <<__ERROR__

Your input "#{toolchain}" wasn't valid.
Fallback to GCC toolchain!
__ERROR__
  end

  toolchain
end

CORE_GEMS = {
  'Interactive Shell [mirb]' => 'bin-mirb',
  'Interpreter [mruby]' => 'bin-mruby',
  'Compiler [mrbc]' => 'bin-mrbc',
  'Configurator [mruby-config]' => 'bin-mruby',
  'debugger [mrdb]' => 'bin-debugger',

  'Array Extensions' => 'array-ext',
  'Enumerator' => 'enumerator',
  'Enumerator Lazy' => 'enum-lazy',
  'Enumerator Extensions' => 'enum-ext',
  'eval' => 'eval',
  'exit' => 'exit',
  'Fiber' => 'fiber',
  'Hash Extensions' => 'hash-ext',
  'Kernel Extensions' => 'kernel-ext',
  'Math' => 'math',
  'Numeric Extensions' => 'numeric-ext',
  'Object Extensions' => 'object-ext',
  'ObjectSpace' => 'objectspace',
  'print' => 'print',
  'Proc Extensions' => 'proc-ext',
  'random' => 'random',
  'Range Extensions' => 'range-ext',
  'sprintf' => 'sprintf',
  'String Extensions' => 'string-ext',
  'Struct' => 'struct',
  'Symbol Extensions' => 'symbol-ext',
  'Test [mrbtest]' => 'test',
  'Time' => 'time',
  'Toplevel Extensions' => 'toplevel-ext'
}

def get_default_gems
  puts
  gems = []
  CORE_GEMS.each do |gem, path|
    print "Include '#{gem}' GEM? (Y/n): "
    question = STDIN.gets.chomp
    unless question == 'n'
      gems << path
    end
  end
  gems
end

case main_cmd
when r.('info'), r.('detail')
  puts "Detail information of '#{arg1}':"
  gems.search(arg1, :name).each {|gem| detail_info_proc.call(gem) }
when r.('size')
  puts "Total # of GEMs: #{gems.size}"
when r.('list')
  if arg1 =~ r.('active')
    list_active_gems(gems)
  else
    puts "List of all GEMs:"
    gems.each { |gem| info_proc.call(gem) }
  end
when r.('add')
  gems.activate(arg1)
  puts
  list_active_gems(gems)
when r.('rm')
  gems.deactivate(arg1)
  puts
  list_active_gems(gems)
when r.('find'), 'search'
  puts "Search result for '#{arg1}':"
  gems.search(arg1).each {|gem| info_proc.call(gem) }
when r.('update')
  puts 'Update list of GEMs...'
  amount = gems.size
  gems.update!
  gems = load_gems
  new_gems = gems.size - amount
  if new_gems == 1
    puts "1 new GEM!"
  elsif new_gems > 1
    puts "#{new_gems} new GEMs!"
  else
    puts "No new GEM"
  end
when r.('config')
  if arg1 =~ r.('default')
    toolchain = 'gcc'
    default_gems = CORE_GEMS.each_value.to_a
    default_gem_command = "  conf.gembox 'default'"
  else
    toolchain = get_toolchain
    default_gem_command = get_default_gems.map do |g|
      "  conf.gem :core => 'mruby-#{g}'"
    end.join("\n")
    if default_gem_command == ''
      default_gem_command = '  # No GEMs activated'
    end
  end

  write_file = nil
  [arg1, arg2].each {|x| write_file ||= x =~ r.('write')}

  gem_command = gems.active.map do |g|
    options = ", :options => \'#{g.repooptions}\'" unless g.repooptions.nil?
    "  conf.gem :git => \'#{g.repository}\'#{options}"
  end.join("\n")
  if gem_command == ''
    gem_command = '  # No GEMs activated'
  end

  build_config = <<__CONFIG__

############################
# Start of your build_config

MRuby::Build.new do |conf|
  toolchain :#{toolchain}

  # mruby's Core GEMs
#{default_gem_command}

  # user-defined GEMs
#{gem_command}
end

# End of your build_config
############################
__CONFIG__

  if write_file
    open('./build_config.rb', 'w') {|f| f.puts build_config}
  else
    puts build_config
  end
else
  puts <<INFO
mgem (Version #{Mrbgem::MGEM_VERSION}) is a library manager for mruby

Usage:
  mgem size             How many GEMs are available?
  mgem list active      List GEMs
  mgem info *pattern*   Show detail information about a GEM
  mgem add *name*       Activate a GEM
  mgem rm *name*          De-Activate a GEM
  mgem find *pattern*   Search for GEMs
  mgem config           Generate a mruby build config including all active GEMs
              default   Same as 'mgem config' but w/o interactive questions
              write     Same as 'mgem config' but writes to build_config.rb
  mgem update           Update the list of GEMs

Website:
  https://github.com/bovi/mgem
INFO
end
